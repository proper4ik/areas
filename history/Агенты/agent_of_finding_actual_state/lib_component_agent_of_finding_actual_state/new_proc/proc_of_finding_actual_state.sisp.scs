scp_program -> proc_of_finding_actual_state (*
    -> rrel_params: ... (*
        -> rrel_1: rrel_in: _object;;
        -> rrel_2: rrel_in: _time_point;;
        -> rrel_3: rrel_out: _answer;;
    *);;
    -> rrel_operators: ... (*
        ->rrel_init: ..operator0 (*
            <- genEl;;
            -> rrel_1: rrel_scp_var: rrel_assign: rrel_node: rrel_const: _answer;;
            => nrel_goto: ..operator1;;
        *);;
        ->..operator1 (*
            <- genElStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
            -> rrel_2: rrel_scp_var: rrel_assign: rrel_pos_const_perm: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _object;;
            => nrel_goto: ..operator2;;
        *);;
        ->..operator2 (*
            <- call;;
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_finding_all_situations;;
            -> rrel_2: ... (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _object;;
                -> rrel_2: rrel_scp_var: rrel_assign: _situations;;
            *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _argument0;;
            => nrel_goto: ..operator3;;
        *);;
        ->..operator3 (*
            <- waitReturn;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _argument0;;
            => nrel_goto: ..operator4;;
        *);;
        ->..operator4 (*
            <- ifVarAssign;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _situations;;
            => nrel_then: ..operator5;;
            => nrel_else: ..operator11;;
        *);;
        ->..operator5 (*
            <- searchElStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _situations;;
            -> rrel_2: rrel_scp_var: rrel_assign: _arc;;
            -> rrel_3: rrel_scp_var: rrel_assign: _situation;;
            => nrel_then: ..operator6;;
            => nrel_else: ..operator11;;
        *);;
        ->..operator6 (*
            <- call;;
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_checking_node_with_start_and_end_time_in_time;;
            -> rrel_2: ... (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _situation;;
                -> rrel_2: rrel_fixed: rrel_scp_var: _time_point;;
                -> rrel_3: rrel_scp_var: rrel_assign: _status;;
            *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _argument1;;
            => nrel_goto: ..operator7;;
        *);;
        ->..operator7 (*
            <- waitReturn;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _argument1;;
            => nrel_goto: ..operator8;;
        *);;
        ->..operator8 (*
            <- ifCoin;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _status;;
            -> rrel_2: rrel_fixed: rrel_scp_const: true_node;;
            => nrel_then: ..operator9;;
            => nrel_else: ..operator10;;
        *);;
        ->..operator9 (*
            <- searchSetStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _situation;;
            -> rrel_2: rrel_scp_var: rrel_assign: rrel_pos_const_perm: _arc1;;
            -> rrel_3: rrel_scp_var: rrel_assign: _element;;
            -> rrel_set_3: rrel_fixed: rrel_scp_var: _answer;;
            => nrel_goto: ..operator10;;
        *);;
        ->..operator10 (*
            <- eraseEl;;
            -> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
            => nrel_goto: ..operator5;;
        *);;
        ->..operator11 (*
            <- call;;
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_finding_current_state_in_temporal_decomposition;;
            -> rrel_2: ... (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _object;;
                -> rrel_2: rrel_fixed: rrel_scp_var: _time_point;;
                -> rrel_3: rrel_scp_var: rrel_assign: _state;;
            *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _argument2;;
            => nrel_goto: ..operator12;;
        *);;
        ->..operator12 (*
            <- waitReturn;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _argument2;;
            => nrel_goto: ..operator13;;
        *);;
        ->..operator13 (*
            <- ifVarAssign;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _state;;
            => nrel_then: ..operator14;;
            => nrel_else: ..operator15;;
        *);;
        ->..operator14 (*
            <- sys_gen;;
            -> rrel_1: rrel_fixed: rrel_scp_const: temporal_decomposition_template;;
            -> rrel_2: rrel_scp_var: rrel_assign: _results;;
            -> rrel_3: rrel_fixed: rrel_scp_const: temporal_decomposition_template_values;;
            => nrel_goto: ..operator15;;
        *);;
        ->..operator15 (*
            <- return;;
        *);;
    *);;
*);;
  temporal_decomposition_template_values -> ... (*    -> rrel_1: rrel_scp_const: _answer_in_template;;    -> rrel_2: rrel_scp_var: _answer;;  *);;  temporal_decomposition_template_values -> ... (*    -> rrel_1: rrel_scp_const: _object_in_template;;    -> rrel_2: rrel_scp_var: _object;;  *);;  temporal_decomposition_template_values -> ... (*    -> rrel_1: rrel_scp_const: _state_in_template;;    -> rrel_2: rrel_scp_var: _state;;  *);;