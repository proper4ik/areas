sc_agent_of_search_of_all_output_arcs
=> nrel_main_idtf:
	[sc-агент поиска всех выходящих константных позитивных стационарных sc-дуг принадлежности] (* <- lang_ru;; *);
	[sc-agent of search of all output constant positive permanent accessory sc-arcs] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_output_arcs_initiation_condition => ..sc_agent_of_search_of_all_output_arcs_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_output_const_pos_arcs
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех выходящих константных позитивных стационарных sc-дуг принадлежности является поиск всех выходящих константных позитивных стационарных sc-дуг принадлежности.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_output_arcs.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_output_arcs.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_output_arcs_c (* <- active_sc_agent;; *);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_independent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			agent_proc_search_all_output;
			proc_search_all_output
		};;
		-> sc_agent_of_search_of_all_output_arcs_scp (* <- active_sc_agent;; *);; 
	*);;

..sc_agent_of_search_of_all_output_arcs_initiation_condition
= [*
	question_search_all_output_const_pos_arcs _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_output_arcs_result
= [*
	question_search_all_output_const_pos_arcs _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;

/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_output_arcs_with_rel
=> nrel_main_idtf:
	[sc-агент поиска всех выходящих константных позитивных стационарных sc-дуг принадлежности с отношениями] (* <- lang_ru;; *);
	[sc-agent of search of all output constant positive permanent accessory sc-arcs with relations] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_output_arcs_with_rel_initiation_condition => ..sc_agent_of_search_of_all_output_arcs_with_rel_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_output_const_pos_arcs_with_rel
	};
<- key_sc_element:
	..sc_agent_of_search_of_all_output_arcs_with_rel_behavior
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех выходящих константных позитивных стационарных sc-дуг принадлежности с отношениями является поиск всех выходящих константных позитивных стационарных sc-дуг принадлежности, а также всех ролевых отношений, которым принадлежат какие-либо из найденных дуг принадлежности];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_output_arcs.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_output_arcs.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_output_arcs_with_rel_c (* <- active_sc_agent;; *);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_independent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			agent_proc_search_all_output_with_rel;
			proc_search_all_output_with_rel;
			proc_search_all_input
		};;
		-> sc_agent_of_search_of_all_output_arcs_with_rel_scp (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_output_arcs_with_rel_initiation_condition
= [*
	question_search_all_output_const_pos_arcs_with_rel _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_output_arcs_with_rel_result
= [*
	question_search_all_output_const_pos_arcs_with_rel _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/
sc_agent_of_search_of_all_input_arcs
=> nrel_main_idtf:
	[sc-агент поиска всех входящих константных позитивных стационарных sc-дуг принадлежности] (* <- lang_ru;; *);
	[sc-agent of search of all input constant positive permanent accessory sc-arcs] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_input_arcs_initiation_condition => ..sc_agent_of_search_of_all_input_arcs_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_input_const_pos_arcs
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех входящих константных позитивных стационарных sc-дуг принадлежности является поиск всех входящих константных позитивных стационарных sc-дуг принадлежности.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_input_arcs.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_input_arcs.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_input_arcs_c (* <- active_sc_agent;; *);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_independent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			agent_proc_search_all_input;
			proc_search_all_input
		};;
		-> sc_agent_of_search_of_all_input_arcs_scp (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_input_arcs_initiation_condition
= [*
	question_search_all_input_const_pos_arcs _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_input_arcs_result
= [*
	question_search_all_input_const_pos_arcs _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_input_arcs_with_rel
=> nrel_main_idtf:
	[sc-агент поиска всех выходящих константных позитивных стационарных sc-дуг принадлежности с отношениями] (* <- lang_ru;; *);
	[sc-agent of search of all input constant positive permanent accessory sc-arcs with relations] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_input_arcs_with_rel_initiation_condition => ..sc_agent_of_search_of_all_input_arcs_with_rel_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_input_const_pos_arcs_with_rel
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех входящих константных позитивных стационарных sc-дуг принадлежности с отношениями является поиск всех входящих константных позитивных стационарных sc-дуг принадлежности, а также всех ролевых отношений, которым принадлежат какие-либо из найденных дуг принадлежности];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_input_arcs.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_input_arcs.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_input_arcs_with_rel_c (* <- active_sc_agent;; *);;
	*);
=> nrel_inclusion: ..sc_agent_of_search_of_all_input_arcs_with_rel_scp_realization
	(*
		<- platform_independent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			agent_proc_search_all_input_with_rel;
			proc_search_all_input_with_rel;
			proc_search_all_input
		};;
		-> sc_agent_of_search_of_all_input_arcs_with_rel_scp (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_input_arcs_with_rel_initiation_condition
= [*
	question_search_all_input_const_pos_arcs_with_rel _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_input_arcs_with_rel_result
= [*
	question_search_all_input_const_pos_arcs_with_rel _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_decomposition
=> nrel_main_idtf:
	[sc-агент поиска декомпозиции заданного sc-элемента] (* <- lang_ru;; *);
	[sc-agent of search of decomposition of given sc-element] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_decomposition_initiation_condition => ..sc_agent_of_search_of_decomposition_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_decomposition
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска декомпозиции заданного sc-элемента является поиск всех sc-элементов, на которые декомпозируется заданный sc-элемент при помощи связок отношений, принадлежащих классу отношение декомпозиции. Если на указанных sc-элементах задано отношение порядка, то его связки также добавляются во множество, являющееся результатом выполнения действия поиска декомпозиции заданного sc-элемента. При этом учитываются декомпозиция только на один уровень.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_decomposition_agent_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_decomposition_initiation_condition
= [*
	question_search_decomposition _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_decomposition_result
= [*
	question_search_decomposition _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_subclasses_in_quasybinary_relation
=> nrel_main_idtf:
	[sc-агент поиска всех подклассов в квазибинарном отношении] (* <- lang_ru;; *);
	[sc-agent of search of all subclasses in quasybinary relation] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_subclasses_in_quasybinary_relation_initiation_condition => ..sc_agent_of_search_of_all_subclasses_in_quasybinary_relation_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_subclasses_in_quasybinary_relation
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех подклассов в квазибинарном отношении является поиск всех элементов, входящих во множество, являющееся первым компонентом какой-либо бинарной ориентированной пары некоторого квазибинарного отношения, вторым компонентом которой является заданный sc-элемент. После этого та же процедура поиска выполняется для каждого из найденных sc-элементов и далее рекурсивно до тех пор, пока пока поиск соответствующей конструкции успешен. Если на указанных sc-элементах задано отношение порядка, то его связки также добавляются во множество, являющееся результатом выполнения действия поиска декомпозиции заданного sc-элемента.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_subclasses_in_quasybinary_relation_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_subclasses_in_quasybinary_relation_initiation_condition
= [*
	question_search_all_subclasses_in_quasybinary_relation _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_subclasses_in_quasybinary_relation_result
= [*
	question_search_all_subclasses_in_quasybinary_relation _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_superclasses_in_quasybinary_relation
=> nrel_main_idtf:
	[sc-агент поиска всех надклассов в квазибинарном отношении] (* <- lang_ru;; *);
	[sc-agent of search of all superclasses in quasybinary relation] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_superclasses_in_quasybinary_relation_initiation_condition => ..sc_agent_of_search_of_all_superclasses_in_quasybinary_relation_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_superclasses_in_quasybinary_relation
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех надклассов в квазибинарном отношении является поиск всех элементов, являющихся вторым компонентом какой-либо бинарной ориентированной пары некоторого квазибинарного отношения, первым элементом которой является множество, элементом которого является заданный sc-элемент. После этого та же процедура поиска выполняется для каждого из найденных sc-элементов и далее рекурсивно до тех пор, пока поиск соответствующей конструкции успешен.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_structure.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_superclasses_in_quasybinary_relation_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_superclasses_in_quasybinary_relation_initiation_condition
= [*
	question_search_all_superclasses_in_quasybinary_relation _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_superclasses_in_quasybinary_relation_result
= [*
	question_search_all_superclasses_in_quasybinary_relation _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_identifiers
=> nrel_main_idtf:
	[sc-агент поиска всех идентификаторов заданного sc-элемента] (* <- lang_ru;; *);
	[sc-agent of search of all identifiers of given sc-element] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_identifiers_initiation_condition => ..sc_agent_of_search_of_all_identifiers_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_identifiers
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех идентификаторов заданного sc-элемента является поиск всех исходящих из заданного sc-элемента бинарных ориентированных пар, принадлежащих некоторому отношению идентификации.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_identifiers.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_identifiers.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_identifiers_agent_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_identifiers_initiation_condition
= [*
	question_search_all_identifiers _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_all_identifiers_result
= [*
	question_search_all_identifiers _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_all_identified_elements
=> nrel_main_idtf:
	[sc-агент поиска всех идентифицированных sc-элементов в базе знаний] (* <- lang_ru;; *);
	[sc-agent of search of all identified sc-elements in knowledge base] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_all_identified_elements_initiation_condition => ..sc_agent_of_search_of_all_identified_elements_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_all_identified_elements
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска всех идентифицированных sc-элементов в базе знаний является поиск всех связок отношения основной идентификатор* и инцидентных им sc-элементов.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_identifiers.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_identifiers.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_all_identified_elements_agent_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_all_identified_elements_initiation_condition
= [*
	question_search_all_identified_elements _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
*];;

..sc_agent_of_search_of_all_identified_elements_result
= [*
	question_search_all_identified_elements _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_full_semantic_neighborhood
=> nrel_main_idtf:
	[sc-агент поиска полной семантической окрестности] (* <- lang_ru;; *);
	[sc-agent of search of full semantic neighborhood] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_full_semantic_neighborhood_initiation_condition => ..sc_agent_of_search_of_full_semantic_neighborhood_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_full_semantic_neighborhood
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска полной сементической окрестности заданного sc-элемента является поиск всех sc-коннекторов, инцидентных заданному sc-элементу, а также sc-элементов, являющихся частью нижеперечисленых конструкций:
1) Если заданный sc-элемент является ключевым sc-элементом некоторой типичной sc-окрестности, то в во множество, являющееся результатом выполнения действия поиска полной сементической окрестности добавляются все sc-элементы, входящие в указанную типичную sc-окрестность.
2) Если заданный sc-элемент входит в связку некоторого небинарного отношения, то в ответ добавляются все sc-элементы, входящие в связку данного отношения, а также знак самого данного отношения.
3) Осуществляется поиск всех подклассов в квазибинарном отношении, входящих во множество, являющееся первым компонентом какой-либо бинарной ориентированной пары некоторого квазибинарного отношения, вторым компонентом которой является заданный sc-элемент. Если на указанных sc-элементах задано отношение порядка, то его связки также добавляются во множество, являющееся результатом выполнения действия поиска полной сементической окрестности.
4) Осуществляется поиск всех элементов, являющихся вторым компонентом какой-либо бинарной ориентированной пары некоторого квазибинарного отношения, первым элементом которой является множество, элементом которого является заданный sc-элемент.
5) Если для какого-либо из sc-элементов, попавших во множество, являющееся результатом выполнения действия поиска полной сементической окрестности существует его трансляция на какой-либо внешний язык, то во множество, элементом которого является заданный sc-элемент, добавляется связки отношения трансляция sc-текста*, sc-ссылки, входящие во множества, являющиеся первыми компонетами указанных связок, а также роли этих sc-ссылок в рамках данного множества, и классы, которым принадлежат эти sc-ссылки.
.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_semantic_neighborhood.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_semantic_neighborhood.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_full_semantic_neighborhood_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_full_semantic_neighborhood_initiation_condition
= [*
	question_search_full_semantic_neighborhood _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_search_of_full_semantic_neighborhood_result
= [*
	question_search_full_semantic_neighborhood _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;
/*============================================================================================================================================================================*/

sc_agent_of_search_of_links_of_relation_connected_with_element
=> nrel_main_idtf:
	[sc-агент поиска связок заданного отношения, компонентом которых является заданный sc-элемент] (* <- lang_ru;; *);
	[sc-agent of search of links of given relation, connected with given sc-element] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_search_of_links_of_relation_connected_with_element_initiation_condition => ..sc_agent_of_search_of_links_of_relation_connected_with_element_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_search_links_of_relation_connected_with_element
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска связок заданного отношения, компонентом которых является заданный sc-элемент, является поиск всех связок заданного отношения, компонентом которых является заданный sc-элемент. Если отношение при этом является квазибинарным, то поиск осуществляется с учетом конфигурации связок квазибинарного отношения.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_semantic_neighborhood.c; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_semantic_neighborhood.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_search_of_links_of_relation_connected_with_element_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_search_of_links_of_relation_connected_with_element_initiation_condition
= [*
	question_search_links_of_relation_connected_with_element _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_elem;;
	.._question _-> rrel_2:: .._parameter_rel;;
*];;

..sc_agent_of_search_of_links_of_relation_connected_with_element_result
= [*
	question_search_links_of_relation_connected_with_element _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> rrel_1:: .._parameter_elem;;
	.._question _-> rrel_2:: .._parameter_rel;;
*];;

/*============================================================================================================================================================================*/

sc_agent_of_full_pattern_search
=> nrel_main_idtf:
	[sc-агент поиска всех конструкций, полностью изоморфных заданному образцу] (* <- lang_ru;; *);
	[sc-agent of search of all constructions, which are completely isomorphic to given pattern] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_full_pattern_search_initiation_condition => ..sc_agent_of_full_pattern_search_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_full_pattern_search
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска поиска всех конструкций, полностью изоморфных заданному образцу, является поиск sc-конструкций полностью изоморфных заданному образцу поиска, содержащему хотя бы одну sc-переменную и хотя бы одну sc-константу.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_operators.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_search.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/search_pattern_functions.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_operators.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_search.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/search_pattern_functions.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_full_pattern_search_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_full_pattern_search_initiation_condition
= [*
	question_full_pattern_search _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter;;
*];;

..sc_agent_of_full_pattern_search_result
= [*
	question_full_pattern_search _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter;;
*];;


/*============================================================================================================================================================================*/

sc_agent_of_full_pattern_search_with_full_result_gen
=> nrel_main_idtf:
	[sc-агент поиска всех конструкций, полностью изоморфных заданному образцу с генерацией множества всевозможных результатов] (* <- lang_ru;; *);
	[sc-agent of search of all constructions, which are completely isomorphic to given pattern with complete result set generation] (* <- lang_en;; *);
<- abstract_sc_agent;
=> nrel_primary_initiation_condition: (sc_event_add_output_arc => question_initiated);
=> nrel_initiation_condition_and_result: (..sc_agent_of_full_pattern_search_with_full_result_gen_initiation_condition => ..sc_agent_of_full_pattern_search_with_full_result_gen_result);
<= nrel_sc_agent_key_sc_elements: 
	{
		question_initiated;
		question;
		question_full_pattern_search_with_full_result_gen
	};
<- key_sc_element:
	...
	(*
	<- sc_description_of_sc_agent_behavior;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Задачей sc-агента поиска поиска всех конструкций, полностью изоморфных заданному образцу, является поиск sc-конструкций полностью изоморфных заданному образцу поиска, содержащему хотя бы одну sc-переменную и хотя бы одну sc-константу. Первым параметром для соответствующего действия является sc-узел, обозначающий образец поиска, вторым парметром - sc-узел, обозначающий множество результатов поиска, т.е. пар соответствия, первым элементом каждой из которых является некоторый sc-переменная из образца, вторым - соответствующая ей sc-константа.];;
		*);;
	*);
=> nrel_inclusion: ...
	(*
		<- platform_dependent_abstract_sc_agent;;
		<= nrel_sc_agent_program: 
		{
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_operators.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_search.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/search_pattern_functions.cpp; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_operators.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/sc_system_search.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *);
			[owner=deniskoronchik; repo=sc-machine; path= sc-kpm/search/agents/search_pattern/search_pattern_functions.h; syntax=cpp] (* => nrel_format: format_github_source_link;; *)
		};;
		
		-> sc_agent_of_full_pattern_search_with_full_result_gen_c (* <- active_sc_agent;; *);;
	*);;

..sc_agent_of_full_pattern_search_with_full_result_gen_initiation_condition
= [*
	question_full_pattern_search_with_full_result_gen _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_pattern;;
	.._question _-> rrel_2:: .._parameter_result_set;;
*];;

..sc_agent_of_full_pattern_search_with_full_result_gen_result
= [*
	question_full_pattern_search_with_full_result_gen _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> rrel_1:: .._parameter_pattern;;
	.._question _-> rrel_2:: .._parameter_result_set;;
*];;
/*================================================================================================================================================================*/
// Объявляем sc-агент поисковой операции
sc_agent_of_search_state_operation
// Указываем множество идентификаторов агента
=> nrel_main_idtf:
// lang_ru – атрибут идентификатора на русском языке
	[sc-агент поиска состояния объекта в определенный момент времени (новый)] 
	(*
		<- lang_ru;; 
	*);
// lang_en – атрибут идентификатора на английском языке
	[sc-agent of search (new)] 
	(*
	<- lang_en;; 
	*);
// Указываем, что наш агент принадлежит классу абстрактныхsc-агентов
<- abstract_sc_agent;
// Указываем начальное условие для нашей операции
=> nrel_primary_initiation_condition: 
	(sc_event_add_output_arc => question_initiated);
// Указываем начальное условие и результат для нашей операции
=> nrel_initiation_condition_and_result: 
	(..sc_agent_of_search_state_operation_initiation_condition => ..sc_agent_of_search_state_operation_result);
<= nrel_sc_agent_key_sc_elements:
{
	question_initiated;
	question;
	question_search_state_operation
}; 
// Описание деятельности sc-агента
<- key_sc_element:
	...
	(*
		<- sc_description_of_sc_agent_behavior;;
		<= nrel_sc_text_translation:
			...
			(*
				->rrel_example:
					[Задачей sc-агента поиска является поиск.];;
			*);;
	*);
// описание первичного условия инициирования sc-агента
=> nrel_inclusion: ...
(*
	<- platform_independent_abstract_sc_agent;;
	<= nrel_sc_agent_program:
	{
		agent_proc_get_object_state_new_style;
		proc_get_object_state_new_style
	};;
	-> sc_agent_of_search_state_operation_scp 
		(*
			<- active_sc_agent;; 
		*);;
*);;
// условия инициирования агента
..sc_agent_of_search_state_operation_initiation_condition
= [*
	question_search_state_operation _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_object;;
	.._question _-> rrel_2:: .._parameter_date;;
*];;
// описание результатов выполнения sc-агента
..sc_agent_of_search_state_operation_result
= [*
	question_search_state_operation _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_object;;
	.._question _-> rrel_2:: .._parameter_date;;
	.._question _=> nrel_answer:: .._answer;;
*];;
/*================================================================================================================================================================*/

// Объявляем sc-агент поисковой операции
sc_agent_of_search_associations_operation
// Указываем множество идентификаторов агента
=> nrel_main_idtf:
// lang_ru – атрибут идентификатора на русском языке
	[sc-агент поиска объектов для составления тематического маршрута экскурсии] 
	(*
		<- lang_ru;; 
	*);
// lang_en – атрибут идентификатора на английском языке
	[sc-agent of search] 
	(*
	<- lang_en;; 
	*);
// Указываем, что наш агент принадлежит классу абстрактныхsc-агентов
<- abstract_sc_agent;
// Указываем начальное условие для нашей операции
=> nrel_primary_initiation_condition: 
	(sc_event_add_output_arc => question_initiated);
// Указываем начальное условие и результат для нашей операции
=> nrel_initiation_condition_and_result: 
	(..sc_agent_of_search_associations_operation_initiation_condition => ..sc_agent_of_search_associations_operation_result);
<= nrel_sc_agent_key_sc_elements:
{
	question_initiated;
	question;
        question_search_associations_operation
}; 
// Описание деятельности sc-агента
<- key_sc_element:
	...
	(*
		<- sc_description_of_sc_agent_behavior;;
		<= nrel_sc_text_translation:
			...
			(*
				->rrel_example:
					[Задачей sc-агента поиска является поиск.];;
			*);;
	*);
// описание первичного условия инициирования sc-агента
=> nrel_inclusion: ...
(*
	<- platform_independent_abstract_sc_agent;;
	<= nrel_sc_agent_program:
	{
          agent_proc_search_associations;
          proc_search_associations
	};;
	-> sc_agent_of_search_associations_operation_scp 
		(*
			<- active_sc_agent;; 
		*);;
*);;
// условия инициирования агента
..sc_agent_of_search_associations_operation_initiation_condition
= [*
	question_search_associations_operation _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> .._parameter_object;;
*];;
// описание результатов выполнения sc-агента
..sc_agent_of_search_associations_operation_result
= [*
	question_search_associations_operation _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> .._parameter_object;;
*];;
/*===============================================================================================================================================================*/
// Объявляем sc-агент поисковой операции
sc_agent_of_show_time_of_belonging_operation
// Указываем множество идентификаторов агента
=> nrel_main_idtf:
// lang_ru – атрибут идентификатора на русском языке
	[sc-агент показа временного периода актуальности некоторой дуги] 
	(*
		<- lang_ru;; 
	*);
// lang_en – атрибут идентификатора на английском языке
	[sc-agent of search] 
	(*
	<- lang_en;; 
	*);
// Указываем, что наш агент принадлежит классу абстрактныхsc-агентов
<- abstract_sc_agent;
// Указываем начальное условие для нашей операции
=> nrel_primary_initiation_condition: 
	(sc_event_add_output_arc => question_initiated);
// Указываем начальное условие и результат для нашей операции
=> nrel_initiation_condition_and_result: 
	(..sc_agent_of_show_time_of_belonging_operation_initiation_condition => ..sc_agent_of_show_time_of_belonging_operation_result);
<= nrel_sc_agent_key_sc_elements:
{
	question_initiated;
	question;
        question_show_time
}; 
// Описание деятельности sc-агента
<- key_sc_element:
	...
	(*
		<- sc_description_of_sc_agent_behavior;;
		<= nrel_sc_text_translation:
			...
			(*
				->rrel_example:
					[Задачей sc-агента поиска является поиск.];;
			*);;
	*);
// описание первичного условия инициирования sc-агента
=> nrel_inclusion: ...
(*
	<- platform_independent_abstract_sc_agent;;
	<= nrel_sc_agent_program:
	{
          agent_proc_show_time_of_belonging;
          proc_show_time_of_belonging
	};;
	-> sc_agent_of_show_time_of_belonging_operation_scp 
		(*
			<- active_sc_agent;; 
		*);;
*);;
// условия инициирования агента
..sc_agent_of_show_time_of_belonging_operation_initiation_condition
= [*
	question_show_time _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_object;;
	.._question _-> rrel_2:: .._parameter_set;;
*];;
// описание результатов выполнения sc-агента
..sc_agent_of_show_time_of_belonging_operation_result
= [*
	question_show_time _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> rrel_1:: .._parameter_object;;
	.._question _-> rrel_2:: .._parameter_set;;
*];;
/*===============================================================================================================================================================*/
// Объявляем sc-агент поисковой операции
sc_agent_of_show_time_of_rel_operation
// Указываем множество идентификаторов агента
=> nrel_main_idtf:
// lang_ru – атрибут идентификатора на русском языке
	[sc-агент показа временного периода актуальности некоторого отношения] 
	(*
		<- lang_ru;; 
	*);
// lang_en – атрибут идентификатора на английском языке
	[sc-agent of search] 
	(*
	<- lang_en;; 
	*);
// Указываем, что наш агент принадлежит классу абстрактныхsc-агентов
<- abstract_sc_agent;
// Указываем начальное условие для нашей операции
=> nrel_primary_initiation_condition: 
	(sc_event_add_output_arc => question_initiated);
// Указываем начальное условие и результат для нашей операции
=> nrel_initiation_condition_and_result: 
	(..sc_agent_of_show_time_of_rel_operation_initiation_condition => ..sc_agent_of_show_time_of_rel_operation_result);
<= nrel_sc_agent_key_sc_elements:
{
	question_initiated;
	question;
        question_show_time_rel
}; 
// Описание деятельности sc-агента
<- key_sc_element:
	...
	(*
		<- sc_description_of_sc_agent_behavior;;
		<= nrel_sc_text_translation:
			...
			(*
				->rrel_example:
					[Задачей sc-агента поиска является поиск.];;
			*);;
	*);
// описание первичного условия инициирования sc-агента
=> nrel_inclusion: ...
(*
	<- platform_independent_abstract_sc_agent;;
	<= nrel_sc_agent_program:
	{
          agent_proc_show_time_of_rel;
          proc_show_time_of_rel
	};;
	-> sc_agent_of_show_time_of_rel_operation_scp 
		(*
			<- active_sc_agent;; 
		*);;
*);;
// условия инициирования агента
..sc_agent_of_show_time_of_rel_operation_initiation_condition
= [*
	question_show_time_rel _-> .._question;;
	question_initiated _-> .._question;;
	question _-> .._question;;
	.._question _-> rrel_1:: .._parameter_element1;;
	.._question _-> rrel_2:: .._parameter_relation;;
	.._question _-> rrel_3:: .._parameter_element2;;
*];;
// описание результатов выполнения sc-агента
..sc_agent_of_show_time_of_rel_operation_result
= [*
	question_show_time _-> .._question;;
	question_finished _-> .._question;;
	question _-> .._question;;
	.._question _=> nrel_answer:: .._answer;;
	.._question _-> rrel_1:: .._parameter_element1;;
	.._question _-> rrel_2:: .._parameter_relation;;
	.._question _-> rrel_3:: .._parameter_element2;;
*];;
//============================================================================================================================
// Объявляем sc-агент поисковой операции
sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf
// Указываем множество идентификаторов агента
=>nrel_main_idtf:
// lang_ru – атрибут идентификатора на русском языке
[sc-агентпоиска] (* <- lang_ru;; *);
// lang_en – атрибут идентификатора на английском языке
[sc-agent of search] (* <- lang_en;; *);
// Указываем, что наш агент принадлежит классу абстрактныхsc-агентов
<- abstract_sc_agent;
// Указываем начальное условие для нашей операции
=>nrel_primary_initiation_condition: (sc_event_add_output_arc =>question_initiated);
// Указываем начальное условие и результат для нашей операции
=>nrel_initiation_condition_and_result: (..sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf_initiation_condition =>
..sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf_result);
<= nrel_sc_agent_key_sc_elements:
{
question_initiated;
question;
question_search_of_nodes_which_have_no_certain_lang_idtf
}; // Описание деятельности sc-агента
<- key_sc_element:
...
(*
<- sc_description_of_sc_agent_behavior;;
<= nrel_sc_text_translation:
...
(*->rrel_example:
[Задачей sc-агента поиска является поиск.];;
*);;
*); // описание первичного условия инициирования sc-агента
=>nrel_inclusion: ...
(*
<- platform_independent_abstract_sc_agent;;
<= nrel_sc_agent_program:
{
agent_proc_search_of_nodes_which_have_no_certain_lang_idtf;
proc_search_of_nodes_which_have_no_certain_lang_idtf
};;
->sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf_scp (* <- active_sc_agent;; *);;
*);;
// условия инициирования агента
..sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf_initiation_condition
= [*
question_search_of_nodes_which_have_no_certain_lang_idtf _-> .._question;;
question_initiated _-> .._question;;
question _-> .._question;;
.._question _-> .._parameter;;
*];;
// описание результатов выполнения sc-агента
..sc_agent_of_search_of_nodes_which_have_no_certain_lang_idtf_result
= [*
question_search_of_nodes_which_have_no_certain_lang_idtf _-> .._question;;
question_finished _-> .._question;;
question _-> .._question;;
.._question _=>nrel_answer:: .._answer;;
.._question _-> .._parameter;;
*];;


